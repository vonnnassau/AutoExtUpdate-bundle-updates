{"version":3,"file":"index.js","sources":["../../../../cep.config.ts","../../../../src/shared/shared.ts","../../../../src/ui-jsx/aeft/aeft.ts","../../../../src/ui-jsx/utils/samples.ts","../../../../src/ui-jsx/ilst/ilst.ts","../../../../src/ui-jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\r\n//import pkg from './package.json' assert { type: 'json' };\r\n//const { version } = pkg;\r\nimport pkg from './package.json';\r\nconst { version } = pkg;\r\n\r\nconst config: CEP_Config = {\r\n  version,\r\n  id: \"com.autoextupdate.cep\", \r\n  displayName: \"AutoExtUpdate\", \r\n  symlink: \"local\",\r\n  port: 3000,\r\n  servePort: 5000,\r\n  startingDebugPort: 8860,\r\n  extensionManifestVersion: 6.0,\r\n  requiredRuntimeVersion: 9.0,\r\n  hosts: [\r\n    { name: \"AEFT\", version: \"[0.0,99.9]\" }, \r\n    { name: \"ILST\", version: \"[0.0,99.9]\" }, \r\n  ],\r\n\r\n  type: \"Panel\",\r\n  iconDarkNormal: \"./src/assets/light-icon.png\",\r\n  iconNormal: \"./src/assets/dark-icon.png\",\r\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\r\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\r\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\r\n  width: 500,\r\n  height: 550,\r\n\r\n  panels: [\r\n    {\r\n      mainPath: \"./main/index.html\",\r\n      name: \"main\",\r\n      panelDisplayName: \"AutoExtUpdate\", \r\n      autoVisible: true,\r\n      width: 600,\r\n      height: 650,\r\n    },\r\n  ],\r\n  build: {\r\n    jsxBin: \"off\",\r\n    sourceMap: true,\r\n  },\r\n  zxp: {\r\n    country: \"US\",\r\n    province: \"CA\",\r\n    org: \"Company\",\r\n    password: \"password\",\r\n    tsa: [\r\n      \"http://timestamp.digicert.com/\", // Windows Only\r\n      \"http://timestamp.apple.com/ts01\", // MacOS Only\r\n    ],\r\n    allowSkipTSA: false,\r\n    sourceMap: false,\r\n    jsxBin: \"off\",\r\n  },\r\n  installModules: [],\r\n  copyAssets: [],\r\n  copyZipAssets: [],\r\n};\r\nexport default config;\r\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\nexport const company = config.zxp.org;\r\nexport const displayName = config.displayName;\r\nexport const version = config.version;\r\n","export const helloWorld = () => {\r\n  var comp = app.project.activeItem;\r\n\r\n  if (comp && comp instanceof CompItem) {\r\n    app.beginUndoGroup(\"Add Hello Layer\");\r\n\r\n    var textLayer = comp.layers.addText(\"Hello from After Effects!\");\r\n    textLayer.name = \"martians\";\r\n\r\n    app.endUndoGroup();\r\n    return \"✅ Text layer added\";\r\n  } else {\r\n    return \"⚠️ No active comp selected\";\r\n  }\r\n};\r\n\r\n\r\nexport const createLayer = () => {\r\n  var comp = app.project.activeItem;\r\n\r\n  if (comp && comp instanceof CompItem) {\r\n    app.beginUndoGroup(\"Add Hello Layer\");\r\n\r\n    var textLayer = comp.layers.addText(\"Another Layer\");\r\n    textLayer.name = \"Another\";\r\n\r\n    app.endUndoGroup();\r\n    return \"✅ Text layer added\";\r\n  } else {\r\n    return \"⚠️ No active comp selected\";\r\n  }\r\n};\r\n\r\nexport const testAlert = () => {\r\n  alert(\"This is a test alert from AEFT!\");\r\n}\r\n\r\n$.writeln(\"ExtendScript bundle loaded and running.\");","export const helloVoid = (): void => {\r\n  alert(\"test\");\r\n};\r\nexport const helloError = (str: string) => {\r\n  // Intentional Error for Error Handling Demonstration\r\n  //@ts-ignore\r\n  throw new Error(`We're throwing an error`);\r\n};\r\n\r\nexport const helloStr = (str: string) => {\r\n  alert(`ExtendScript received a string: ${str}`);\r\n  return str;\r\n};\r\nexport const helloNum = (n: number) => {\r\n  alert(`ExtendScript received a number: ${n.toString()}`);\r\n  return n;\r\n};\r\nexport const helloArrayStr = (arr: string[]) => {\r\n  alert(\r\n    `ExtendScript received an array of ${arr.length} strings: ${arr.toString()}`\r\n  );\r\n  return arr;\r\n};\r\nexport const helloObj = (obj: { height: number; width: number }) => {\r\n  alert(`ExtendScript received an object: ${JSON.stringify(obj)}`);\r\n  return {\r\n    y: obj.height,\r\n    x: obj.width,\r\n  };\r\n};\r\n","import {\r\n  helloVoid,\r\n  helloError,\r\n  helloStr,\r\n  helloNum,\r\n  helloArrayStr,\r\n  helloObj,\r\n} from \"../utils/samples\";\r\nexport { helloError, helloStr, helloNum, helloArrayStr, helloObj, helloVoid };\r\nimport { dispatchTS } from \"../utils/utils\";\r\n\r\nexport const helloWorld = () => {\r\n  alert(\"Hello from Illustrator\");\r\n};\r\n","// @include './lib/json2.js'\r\n\r\nimport { ns } from \"../shared/shared\";\r\n\r\nimport * as aeft from \"./aeft/aeft\"; \r\nimport * as ilst from \"./ilst/ilst\"; \r\n\r\n//@ts-ignore\r\nconst host = typeof $ !== \"undefined\" ? $ : window;\r\n\r\n// A safe way to get the app name since some versions of Adobe Apps broken BridgeTalk in various places (e.g. After Effects 24-25)\r\n// in that case we have to do various checks per app to deterimine the app name\r\n\r\nconst getAppNameSafely = (): ApplicationName | \"unknown\" => {\r\n  const compare = (a: string, b: string) => {\r\n    return a.toLowerCase().indexOf(b.toLowerCase()) > -1;\r\n  };\r\n  const exists = (a: any) => typeof a !== \"undefined\";\r\n  const isBridgeTalkWorking =\r\n    typeof BridgeTalk !== \"undefined\" &&\r\n    typeof BridgeTalk.appName !== \"undefined\";\r\n\r\n  if (isBridgeTalkWorking) {\r\n    return BridgeTalk.appName;\r\n  } else if (app) {\r\n    //@ts-ignore\r\n    if (exists(app.name)) {\r\n      //@ts-ignore\r\n      const name: string = app.name;\r\n      if (compare(name, \"photoshop\")) return \"photoshop\";\r\n      if (compare(name, \"illustrator\")) return \"illustrator\";\r\n      if (compare(name, \"audition\")) return \"audition\";\r\n      if (compare(name, \"bridge\")) return \"bridge\";\r\n      if (compare(name, \"indesign\")) return \"indesign\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.appName)) {\r\n      //@ts-ignore\r\n      const appName: string = app.appName;\r\n      if (compare(appName, \"after effects\")) return \"aftereffects\";\r\n      if (compare(appName, \"animate\")) return \"animate\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.path)) {\r\n      //@ts-ignore\r\n      const path = app.path;\r\n      if (compare(path, \"premiere\")) return \"premierepro\";\r\n    }\r\n    //@ts-ignore\r\n    if (exists(app.getEncoderHost) && exists(AMEFrontendEvent)) {\r\n      return \"ame\";\r\n    }\r\n  }\r\n  return \"unknown\";\r\n};\r\n\r\nswitch (getAppNameSafely()) {\r\n  case \"aftereffects\":\r\n  case \"aftereffectsbeta\":\r\n    (host as Record<string, any>)[ns] = aeft;\r\n    break;\r\n\r\n  \r\n  \r\n  \r\n  \r\n  case \"illustrator\":\r\n  case \"illustratorbeta\":\r\n(host as Record<string, any>)[ns] = ilst;\r\n    break;\r\n\r\n  \r\n  \r\n  }\r\n\r\nconst empty = {};\r\n// prettier-ignore\r\nexport type Scripts = typeof empty\r\n  & typeof aeft \r\n  & typeof ilst \r\n  ;\r\n\r\n// https://extendscript.docsforadobe.dev/interapplication-communication/bridgetalk-class.html?highlight=bridgetalk#appname\r\ntype ApplicationName =\r\n  | \"aftereffects\"\r\n  | \"aftereffectsbeta\"\r\n  | \"ame\"\r\n  | \"amebeta\"\r\n  | \"audition\"\r\n  | \"auditionbeta\"\r\n  | \"animate\"\r\n  | \"animatebeta\"\r\n  | \"bridge\"\r\n  | \"bridgebeta\"\r\n  // | \"flash\"\r\n  | \"illustrator\"\r\n  | \"illustratorbeta\"\r\n  | \"indesign\"\r\n  | \"indesignbeta\"\r\n  // | \"indesignserver\"\r\n  | \"photoshop\"\r\n  | \"photoshopbeta\"\r\n  | \"premierepro\"\r\n  | \"premiereprobeta\";\r\n"],"names":["version","app","$","alert","host"],"mappings":"AACA;AACA;AAIA;AACEA;;ACNF;;ACDA;AACE;AAEA;AACEC;;;;AAMA;AACF;AACE;AACF;AACF;AAGA;AACE;AAEA;AACEA;;;;AAMA;AACF;AACE;AACF;AACF;AAEA;;AAEA;AAEAC;;;;;;;;;ACrCA;;AAEA;AACA;AACE;AACA;;AAEF;AAEA;AACEC;AACA;AACF;AACA;;AAEE;AACF;AACA;AACEA;AAGA;AACF;AACA;;;;;;AAMA;;AClBA;;AAEA;;;;;;;;;;;;;ACLA;;AAEA;AACA;;AAEA;;AAEI;;AAEF;;AAAmD;AACnD;AAIA;;;AAGE;AACA;AACE;AACA;;;;;;AAMF;AACA;AACA;AACE;AACA;;;AAGF;AACA;AACA;AACE;AACA;;AAEF;AACA;;AAEE;AACF;AACF;AACA;AACF;AAEA;AACE;AACA;AACGC;AACD;AAMF;AACA;AACDA;AACG;AAIF;AAGF;;AAMA"}